/* automatically generated by rust-bindgen */

use libc::*;
type CXIndex = *c_void;
type Struct_CXTranslationUnitImpl = c_void;
type CXTranslationUnit = *Struct_CXTranslationUnitImpl;
type CXClientData = *c_void;
struct Struct_CXUnsavedFile {
    Filename: *c_schar,
    Contents: *c_schar,
    Length: c_ulong,
}
type Enum_CXAvailabilityKind = c_uint;
const CXAvailability_Available: c_uint = 0;
const CXAvailability_Deprecated: c_uint = 1;
const CXAvailability_NotAvailable: c_uint = 2;
const CXAvailability_NotAccessible: c_uint = 3;
struct CXString {
    data: *c_void,
    private_flags: c_uint,
}
type CXGlobalOptFlags = c_uint;
const CXGlobalOpt_None: c_uint = 0;
const CXGlobalOpt_ThreadBackgroundPriorityForIndexing: c_uint = 1;
const CXGlobalOpt_ThreadBackgroundPriorityForEditing: c_uint = 2;
const CXGlobalOpt_ThreadBackgroundPriorityForAll: c_uint = 3;
type CXFile = *c_void;
struct CXSourceLocation {
    ptr_data: [*c_void * 2],
    int_data: c_uint,
}
struct CXSourceRange {
    ptr_data: [*c_void * 2],
    begin_int_data: c_uint,
    end_int_data: c_uint,
}
type Enum_CXDiagnosticSeverity = c_uint;
const CXDiagnostic_Ignored: c_uint = 0;
const CXDiagnostic_Note: c_uint = 1;
const CXDiagnostic_Warning: c_uint = 2;
const CXDiagnostic_Error: c_uint = 3;
const CXDiagnostic_Fatal: c_uint = 4;
type CXDiagnostic = *c_void;
type CXDiagnosticSet = *c_void;
type Enum_CXLoadDiag_Error = c_uint;
const CXLoadDiag_None: c_uint = 0;
const CXLoadDiag_Unknown: c_uint = 1;
const CXLoadDiag_CannotLoad: c_uint = 2;
const CXLoadDiag_InvalidFile: c_uint = 3;
type Enum_CXDiagnosticDisplayOptions = c_uint;
const CXDiagnostic_DisplaySourceLocation: c_uint = 1;
const CXDiagnostic_DisplayColumn: c_uint = 2;
const CXDiagnostic_DisplaySourceRanges: c_uint = 4;
const CXDiagnostic_DisplayOption: c_uint = 8;
const CXDiagnostic_DisplayCategoryId: c_uint = 16;
const CXDiagnostic_DisplayCategoryName: c_uint = 32;
type Enum_CXTranslationUnit_Flags = c_uint;
const CXTranslationUnit_None: c_uint = 0;
const CXTranslationUnit_DetailedPreprocessingRecord: c_uint = 1;
const CXTranslationUnit_Incomplete: c_uint = 2;
const CXTranslationUnit_PrecompiledPreamble: c_uint = 4;
const CXTranslationUnit_CacheCompletionResults: c_uint = 8;
const CXTranslationUnit_CXXPrecompiledPreamble: c_uint = 16;
const CXTranslationUnit_CXXChainedPCH: c_uint = 32;
const CXTranslationUnit_SkipFunctionBodies: c_uint = 64;
type Enum_CXSaveTranslationUnit_Flags = c_uint;
const CXSaveTranslationUnit_None: c_uint = 0;
type Enum_CXSaveError = c_uint;
const CXSaveError_None: c_uint = 0;
const CXSaveError_Unknown: c_uint = 1;
const CXSaveError_TranslationErrors: c_uint = 2;
const CXSaveError_InvalidTU: c_uint = 3;
type Enum_CXReparse_Flags = c_uint;
const CXReparse_None: c_uint = 0;
type Enum_CXTUResourceUsageKind = c_uint;
const CXTUResourceUsage_AST: c_uint = 1;
const CXTUResourceUsage_Identifiers: c_uint = 2;
const CXTUResourceUsage_Selectors: c_uint = 3;
const CXTUResourceUsage_GlobalCompletionResults: c_uint = 4;
const CXTUResourceUsage_SourceManagerContentCache: c_uint = 5;
const CXTUResourceUsage_AST_SideTables: c_uint = 6;
const CXTUResourceUsage_SourceManager_Membuffer_Malloc: c_uint = 7;
const CXTUResourceUsage_SourceManager_Membuffer_MMap: c_uint = 8;
const CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc: c_uint = 9;
const CXTUResourceUsage_ExternalASTSource_Membuffer_MMap: c_uint = 10;
const CXTUResourceUsage_Preprocessor: c_uint = 11;
const CXTUResourceUsage_PreprocessingRecord: c_uint = 12;
const CXTUResourceUsage_SourceManager_DataStructures: c_uint = 13;
const CXTUResourceUsage_Preprocessor_HeaderSearch: c_uint = 14;
const CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN: c_uint = 1;
const CXTUResourceUsage_MEMORY_IN_BYTES_END: c_uint = 14;
const CXTUResourceUsage_First: c_uint = 1;
const CXTUResourceUsage_Last: c_uint = 14;
struct Struct_CXTUResourceUsageEntry {
    kind: Enum_CXTUResourceUsageKind,
    amount: c_ulong,
}
type CXTUResourceUsageEntry = Struct_CXTUResourceUsageEntry;
struct Struct_CXTUResourceUsage {
    data: *c_void,
    numEntries: c_uint,
    entries: *CXTUResourceUsageEntry,
}
type CXTUResourceUsage = Struct_CXTUResourceUsage;
type Enum_CXCursorKind = c_uint;
const CXCursor_UnexposedDecl: c_uint = 1;
const CXCursor_StructDecl: c_uint = 2;
const CXCursor_UnionDecl: c_uint = 3;
const CXCursor_ClassDecl: c_uint = 4;
const CXCursor_EnumDecl: c_uint = 5;
const CXCursor_FieldDecl: c_uint = 6;
const CXCursor_EnumConstantDecl: c_uint = 7;
const CXCursor_FunctionDecl: c_uint = 8;
const CXCursor_VarDecl: c_uint = 9;
const CXCursor_ParmDecl: c_uint = 10;
const CXCursor_ObjCInterfaceDecl: c_uint = 11;
const CXCursor_ObjCCategoryDecl: c_uint = 12;
const CXCursor_ObjCProtocolDecl: c_uint = 13;
const CXCursor_ObjCPropertyDecl: c_uint = 14;
const CXCursor_ObjCIvarDecl: c_uint = 15;
const CXCursor_ObjCInstanceMethodDecl: c_uint = 16;
const CXCursor_ObjCClassMethodDecl: c_uint = 17;
const CXCursor_ObjCImplementationDecl: c_uint = 18;
const CXCursor_ObjCCategoryImplDecl: c_uint = 19;
const CXCursor_TypedefDecl: c_uint = 20;
const CXCursor_CXXMethod: c_uint = 21;
const CXCursor_Namespace: c_uint = 22;
const CXCursor_LinkageSpec: c_uint = 23;
const CXCursor_Constructor: c_uint = 24;
const CXCursor_Destructor: c_uint = 25;
const CXCursor_ConversionFunction: c_uint = 26;
const CXCursor_TemplateTypeParameter: c_uint = 27;
const CXCursor_NonTypeTemplateParameter: c_uint = 28;
const CXCursor_TemplateTemplateParameter: c_uint = 29;
const CXCursor_FunctionTemplate: c_uint = 30;
const CXCursor_ClassTemplate: c_uint = 31;
const CXCursor_ClassTemplatePartialSpecialization: c_uint = 32;
const CXCursor_NamespaceAlias: c_uint = 33;
const CXCursor_UsingDirective: c_uint = 34;
const CXCursor_UsingDeclaration: c_uint = 35;
const CXCursor_TypeAliasDecl: c_uint = 36;
const CXCursor_ObjCSynthesizeDecl: c_uint = 37;
const CXCursor_ObjCDynamicDecl: c_uint = 38;
const CXCursor_CXXAccessSpecifier: c_uint = 39;
const CXCursor_FirstDecl: c_uint = 1;
const CXCursor_LastDecl: c_uint = 39;
const CXCursor_FirstRef: c_uint = 40;
const CXCursor_ObjCSuperClassRef: c_uint = 40;
const CXCursor_ObjCProtocolRef: c_uint = 41;
const CXCursor_ObjCClassRef: c_uint = 42;
const CXCursor_TypeRef: c_uint = 43;
const CXCursor_CXXBaseSpecifier: c_uint = 44;
const CXCursor_TemplateRef: c_uint = 45;
const CXCursor_NamespaceRef: c_uint = 46;
const CXCursor_MemberRef: c_uint = 47;
const CXCursor_LabelRef: c_uint = 48;
const CXCursor_OverloadedDeclRef: c_uint = 49;
const CXCursor_VariableRef: c_uint = 50;
const CXCursor_LastRef: c_uint = 50;
const CXCursor_FirstInvalid: c_uint = 70;
const CXCursor_InvalidFile: c_uint = 70;
const CXCursor_NoDeclFound: c_uint = 71;
const CXCursor_NotImplemented: c_uint = 72;
const CXCursor_InvalidCode: c_uint = 73;
const CXCursor_LastInvalid: c_uint = 73;
const CXCursor_FirstExpr: c_uint = 100;
const CXCursor_UnexposedExpr: c_uint = 100;
const CXCursor_DeclRefExpr: c_uint = 101;
const CXCursor_MemberRefExpr: c_uint = 102;
const CXCursor_CallExpr: c_uint = 103;
const CXCursor_ObjCMessageExpr: c_uint = 104;
const CXCursor_BlockExpr: c_uint = 105;
const CXCursor_IntegerLiteral: c_uint = 106;
const CXCursor_FloatingLiteral: c_uint = 107;
const CXCursor_ImaginaryLiteral: c_uint = 108;
const CXCursor_StringLiteral: c_uint = 109;
const CXCursor_CharacterLiteral: c_uint = 110;
const CXCursor_ParenExpr: c_uint = 111;
const CXCursor_UnaryOperator: c_uint = 112;
const CXCursor_ArraySubscriptExpr: c_uint = 113;
const CXCursor_BinaryOperator: c_uint = 114;
const CXCursor_CompoundAssignOperator: c_uint = 115;
const CXCursor_ConditionalOperator: c_uint = 116;
const CXCursor_CStyleCastExpr: c_uint = 117;
const CXCursor_CompoundLiteralExpr: c_uint = 118;
const CXCursor_InitListExpr: c_uint = 119;
const CXCursor_AddrLabelExpr: c_uint = 120;
const CXCursor_StmtExpr: c_uint = 121;
const CXCursor_GenericSelectionExpr: c_uint = 122;
const CXCursor_GNUNullExpr: c_uint = 123;
const CXCursor_CXXStaticCastExpr: c_uint = 124;
const CXCursor_CXXDynamicCastExpr: c_uint = 125;
const CXCursor_CXXReinterpretCastExpr: c_uint = 126;
const CXCursor_CXXConstCastExpr: c_uint = 127;
const CXCursor_CXXFunctionalCastExpr: c_uint = 128;
const CXCursor_CXXTypeidExpr: c_uint = 129;
const CXCursor_CXXBoolLiteralExpr: c_uint = 130;
const CXCursor_CXXNullPtrLiteralExpr: c_uint = 131;
const CXCursor_CXXThisExpr: c_uint = 132;
const CXCursor_CXXThrowExpr: c_uint = 133;
const CXCursor_CXXNewExpr: c_uint = 134;
const CXCursor_CXXDeleteExpr: c_uint = 135;
const CXCursor_UnaryExpr: c_uint = 136;
const CXCursor_ObjCStringLiteral: c_uint = 137;
const CXCursor_ObjCEncodeExpr: c_uint = 138;
const CXCursor_ObjCSelectorExpr: c_uint = 139;
const CXCursor_ObjCProtocolExpr: c_uint = 140;
const CXCursor_ObjCBridgedCastExpr: c_uint = 141;
const CXCursor_PackExpansionExpr: c_uint = 142;
const CXCursor_SizeOfPackExpr: c_uint = 143;
const CXCursor_LambdaExpr: c_uint = 144;
const CXCursor_ObjCBoolLiteralExpr: c_uint = 145;
const CXCursor_LastExpr: c_uint = 145;
const CXCursor_FirstStmt: c_uint = 200;
const CXCursor_UnexposedStmt: c_uint = 200;
const CXCursor_LabelStmt: c_uint = 201;
const CXCursor_CompoundStmt: c_uint = 202;
const CXCursor_CaseStmt: c_uint = 203;
const CXCursor_DefaultStmt: c_uint = 204;
const CXCursor_IfStmt: c_uint = 205;
const CXCursor_SwitchStmt: c_uint = 206;
const CXCursor_WhileStmt: c_uint = 207;
const CXCursor_DoStmt: c_uint = 208;
const CXCursor_ForStmt: c_uint = 209;
const CXCursor_GotoStmt: c_uint = 210;
const CXCursor_IndirectGotoStmt: c_uint = 211;
const CXCursor_ContinueStmt: c_uint = 212;
const CXCursor_BreakStmt: c_uint = 213;
const CXCursor_ReturnStmt: c_uint = 214;
const CXCursor_AsmStmt: c_uint = 215;
const CXCursor_ObjCAtTryStmt: c_uint = 216;
const CXCursor_ObjCAtCatchStmt: c_uint = 217;
const CXCursor_ObjCAtFinallyStmt: c_uint = 218;
const CXCursor_ObjCAtThrowStmt: c_uint = 219;
const CXCursor_ObjCAtSynchronizedStmt: c_uint = 220;
const CXCursor_ObjCAutoreleasePoolStmt: c_uint = 221;
const CXCursor_ObjCForCollectionStmt: c_uint = 222;
const CXCursor_CXXCatchStmt: c_uint = 223;
const CXCursor_CXXTryStmt: c_uint = 224;
const CXCursor_CXXForRangeStmt: c_uint = 225;
const CXCursor_SEHTryStmt: c_uint = 226;
const CXCursor_SEHExceptStmt: c_uint = 227;
const CXCursor_SEHFinallyStmt: c_uint = 228;
const CXCursor_NullStmt: c_uint = 230;
const CXCursor_DeclStmt: c_uint = 231;
const CXCursor_LastStmt: c_uint = 231;
const CXCursor_TranslationUnit: c_uint = 300;
const CXCursor_FirstAttr: c_uint = 400;
const CXCursor_UnexposedAttr: c_uint = 400;
const CXCursor_IBActionAttr: c_uint = 401;
const CXCursor_IBOutletAttr: c_uint = 402;
const CXCursor_IBOutletCollectionAttr: c_uint = 403;
const CXCursor_CXXFinalAttr: c_uint = 404;
const CXCursor_CXXOverrideAttr: c_uint = 405;
const CXCursor_AnnotateAttr: c_uint = 406;
const CXCursor_AsmLabelAttr: c_uint = 407;
const CXCursor_LastAttr: c_uint = 407;
const CXCursor_PreprocessingDirective: c_uint = 500;
const CXCursor_MacroDefinition: c_uint = 501;
const CXCursor_MacroExpansion: c_uint = 502;
const CXCursor_MacroInstantiation: c_uint = 502;
const CXCursor_InclusionDirective: c_uint = 503;
const CXCursor_FirstPreprocessing: c_uint = 500;
const CXCursor_LastPreprocessing: c_uint = 503;
struct CXCursor {
    kind: Enum_CXCursorKind,
    xdata: c_int,
    data: [*c_void * 3],
}
type Enum_CXLinkageKind = c_uint;
const CXLinkage_Invalid: c_uint = 0;
const CXLinkage_NoLinkage: c_uint = 1;
const CXLinkage_Internal: c_uint = 2;
const CXLinkage_UniqueExternal: c_uint = 3;
const CXLinkage_External: c_uint = 4;
type Enum_CXLanguageKind = c_uint;
const CXLanguage_Invalid: c_uint = 0;
const CXLanguage_C: c_uint = 1;
const CXLanguage_ObjC: c_uint = 2;
const CXLanguage_CPlusPlus: c_uint = 3;
type Struct_CXCursorSetImpl = c_void;
type CXCursorSet = *Struct_CXCursorSetImpl;
type Enum_CXTypeKind = c_uint;
const CXType_Invalid: c_uint = 0;
const CXType_Unexposed: c_uint = 1;
const CXType_Void: c_uint = 2;
const CXType_Bool: c_uint = 3;
const CXType_Char_U: c_uint = 4;
const CXType_UChar: c_uint = 5;
const CXType_Char16: c_uint = 6;
const CXType_Char32: c_uint = 7;
const CXType_UShort: c_uint = 8;
const CXType_UInt: c_uint = 9;
const CXType_ULong: c_uint = 10;
const CXType_ULongLong: c_uint = 11;
const CXType_UInt128: c_uint = 12;
const CXType_Char_S: c_uint = 13;
const CXType_SChar: c_uint = 14;
const CXType_WChar: c_uint = 15;
const CXType_Short: c_uint = 16;
const CXType_Int: c_uint = 17;
const CXType_Long: c_uint = 18;
const CXType_LongLong: c_uint = 19;
const CXType_Int128: c_uint = 20;
const CXType_Float: c_uint = 21;
const CXType_Double: c_uint = 22;
const CXType_LongDouble: c_uint = 23;
const CXType_NullPtr: c_uint = 24;
const CXType_Overload: c_uint = 25;
const CXType_Dependent: c_uint = 26;
const CXType_ObjCId: c_uint = 27;
const CXType_ObjCClass: c_uint = 28;
const CXType_ObjCSel: c_uint = 29;
const CXType_FirstBuiltin: c_uint = 2;
const CXType_LastBuiltin: c_uint = 29;
const CXType_Complex: c_uint = 100;
const CXType_Pointer: c_uint = 101;
const CXType_BlockPointer: c_uint = 102;
const CXType_LValueReference: c_uint = 103;
const CXType_RValueReference: c_uint = 104;
const CXType_Record: c_uint = 105;
const CXType_Enum: c_uint = 106;
const CXType_Typedef: c_uint = 107;
const CXType_ObjCInterface: c_uint = 108;
const CXType_ObjCObjectPointer: c_uint = 109;
const CXType_FunctionNoProto: c_uint = 110;
const CXType_FunctionProto: c_uint = 111;
const CXType_ConstantArray: c_uint = 112;
const CXType_Vector: c_uint = 113;
type Enum_CXCallingConv = c_uint;
const CXCallingConv_Default: c_uint = 0;
const CXCallingConv_C: c_uint = 1;
const CXCallingConv_X86StdCall: c_uint = 2;
const CXCallingConv_X86FastCall: c_uint = 3;
const CXCallingConv_X86ThisCall: c_uint = 4;
const CXCallingConv_X86Pascal: c_uint = 5;
const CXCallingConv_AAPCS: c_uint = 6;
const CXCallingConv_AAPCS_VFP: c_uint = 7;
const CXCallingConv_Invalid: c_uint = 100;
const CXCallingConv_Unexposed: c_uint = 200;
struct CXType {
    kind: Enum_CXTypeKind,
    data: [*c_void * 2],
}
type Enum_CX_CXXAccessSpecifier = c_uint;
const CX_CXXInvalidAccessSpecifier: c_uint = 0;
const CX_CXXPublic: c_uint = 1;
const CX_CXXProtected: c_uint = 2;
const CX_CXXPrivate: c_uint = 3;
type Enum_CXChildVisitResult = c_uint;
const CXChildVisit_Break: c_uint = 0;
const CXChildVisit_Continue: c_uint = 1;
const CXChildVisit_Recurse: c_uint = 2;
type CXCursorVisitor = *u8;
type Enum_CXNameRefFlags = c_uint;
const CXNameRange_WantQualifier: c_uint = 1;
const CXNameRange_WantTemplateArgs: c_uint = 2;
const CXNameRange_WantSinglePiece: c_uint = 4;
type Enum_CXTokenKind = c_uint;
const CXToken_Punctuation: c_uint = 0;
const CXToken_Keyword: c_uint = 1;
const CXToken_Identifier: c_uint = 2;
const CXToken_Literal: c_uint = 3;
const CXToken_Comment: c_uint = 4;
type CXTokenKind = Enum_CXTokenKind;
struct CXToken {
    int_data: [c_uint * 4],
    ptr_data: *c_void,
}
type CXCompletionString = *c_void;
struct CXCompletionResult {
    CursorKind: Enum_CXCursorKind,
    CompletionString: CXCompletionString,
}
type Enum_CXCompletionChunkKind = c_uint;
const CXCompletionChunk_Optional: c_uint = 0;
const CXCompletionChunk_TypedText: c_uint = 1;
const CXCompletionChunk_Text: c_uint = 2;
const CXCompletionChunk_Placeholder: c_uint = 3;
const CXCompletionChunk_Informative: c_uint = 4;
const CXCompletionChunk_CurrentParameter: c_uint = 5;
const CXCompletionChunk_LeftParen: c_uint = 6;
const CXCompletionChunk_RightParen: c_uint = 7;
const CXCompletionChunk_LeftBracket: c_uint = 8;
const CXCompletionChunk_RightBracket: c_uint = 9;
const CXCompletionChunk_LeftBrace: c_uint = 10;
const CXCompletionChunk_RightBrace: c_uint = 11;
const CXCompletionChunk_LeftAngle: c_uint = 12;
const CXCompletionChunk_RightAngle: c_uint = 13;
const CXCompletionChunk_Comma: c_uint = 14;
const CXCompletionChunk_ResultType: c_uint = 15;
const CXCompletionChunk_Colon: c_uint = 16;
const CXCompletionChunk_SemiColon: c_uint = 17;
const CXCompletionChunk_Equal: c_uint = 18;
const CXCompletionChunk_HorizontalSpace: c_uint = 19;
const CXCompletionChunk_VerticalSpace: c_uint = 20;
struct CXCodeCompleteResults {
    Results: *CXCompletionResult,
    NumResults: c_uint,
}
type Enum_CXCodeComplete_Flags = c_uint;
const CXCodeComplete_IncludeMacros: c_uint = 1;
const CXCodeComplete_IncludeCodePatterns: c_uint = 2;
type Enum_CXCompletionContext = c_uint;
const CXCompletionContext_Unexposed: c_uint = 0;
const CXCompletionContext_AnyType: c_uint = 1;
const CXCompletionContext_AnyValue: c_uint = 2;
const CXCompletionContext_ObjCObjectValue: c_uint = 4;
const CXCompletionContext_ObjCSelectorValue: c_uint = 8;
const CXCompletionContext_CXXClassTypeValue: c_uint = 16;
const CXCompletionContext_DotMemberAccess: c_uint = 32;
const CXCompletionContext_ArrowMemberAccess: c_uint = 64;
const CXCompletionContext_ObjCPropertyAccess: c_uint = 128;
const CXCompletionContext_EnumTag: c_uint = 256;
const CXCompletionContext_UnionTag: c_uint = 512;
const CXCompletionContext_StructTag: c_uint = 1024;
const CXCompletionContext_ClassTag: c_uint = 2048;
const CXCompletionContext_Namespace: c_uint = 4096;
const CXCompletionContext_NestedNameSpecifier: c_uint = 8192;
const CXCompletionContext_ObjCInterface: c_uint = 16384;
const CXCompletionContext_ObjCProtocol: c_uint = 32768;
const CXCompletionContext_ObjCCategory: c_uint = 65536;
const CXCompletionContext_ObjCInstanceMessage: c_uint = 131072;
const CXCompletionContext_ObjCClassMessage: c_uint = 262144;
const CXCompletionContext_ObjCSelectorName: c_uint = 524288;
const CXCompletionContext_MacroName: c_uint = 1048576;
const CXCompletionContext_NaturalLanguage: c_uint = 2097152;
const CXCompletionContext_Unknown: c_uint = 4194303;
type CXInclusionVisitor = *u8;
type CXRemapping = *c_void;
type Enum_CXVisitorResult = c_uint;
const CXVisit_Break: c_uint = 0;
const CXVisit_Continue: c_uint = 1;
struct CXCursorAndRangeVisitor {
    context: *c_void,
    visit: *u8,
}
type CXIdxClientFile = *c_void;
type CXIdxClientEntity = *c_void;
type CXIdxClientContainer = *c_void;
type CXIdxClientASTFile = *c_void;
struct CXIdxLoc {
    ptr_data: [*c_void * 2],
    int_data: c_uint,
}
struct CXIdxIncludedFileInfo {
    hashLoc: CXIdxLoc,
    filename: *c_schar,
    file: CXFile,
    isImport: c_int,
    isAngled: c_int,
}
struct CXIdxImportedASTFileInfo {
    file: CXFile,
    loc: CXIdxLoc,
    isModule: c_int,
}
type CXIdxEntityKind = c_uint;
const CXIdxEntity_Unexposed: c_uint = 0;
const CXIdxEntity_Typedef: c_uint = 1;
const CXIdxEntity_Function: c_uint = 2;
const CXIdxEntity_Variable: c_uint = 3;
const CXIdxEntity_Field: c_uint = 4;
const CXIdxEntity_EnumConstant: c_uint = 5;
const CXIdxEntity_ObjCClass: c_uint = 6;
const CXIdxEntity_ObjCProtocol: c_uint = 7;
const CXIdxEntity_ObjCCategory: c_uint = 8;
const CXIdxEntity_ObjCInstanceMethod: c_uint = 9;
const CXIdxEntity_ObjCClassMethod: c_uint = 10;
const CXIdxEntity_ObjCProperty: c_uint = 11;
const CXIdxEntity_ObjCIvar: c_uint = 12;
const CXIdxEntity_Enum: c_uint = 13;
const CXIdxEntity_Struct: c_uint = 14;
const CXIdxEntity_Union: c_uint = 15;
const CXIdxEntity_CXXClass: c_uint = 16;
const CXIdxEntity_CXXNamespace: c_uint = 17;
const CXIdxEntity_CXXNamespaceAlias: c_uint = 18;
const CXIdxEntity_CXXStaticVariable: c_uint = 19;
const CXIdxEntity_CXXStaticMethod: c_uint = 20;
const CXIdxEntity_CXXInstanceMethod: c_uint = 21;
const CXIdxEntity_CXXConstructor: c_uint = 22;
const CXIdxEntity_CXXDestructor: c_uint = 23;
const CXIdxEntity_CXXConversionFunction: c_uint = 24;
const CXIdxEntity_CXXTypeAlias: c_uint = 25;
type CXIdxEntityLanguage = c_uint;
const CXIdxEntityLang_None: c_uint = 0;
const CXIdxEntityLang_C: c_uint = 1;
const CXIdxEntityLang_ObjC: c_uint = 2;
const CXIdxEntityLang_CXX: c_uint = 3;
type CXIdxEntityCXXTemplateKind = c_uint;
const CXIdxEntity_NonTemplate: c_uint = 0;
const CXIdxEntity_Template: c_uint = 1;
const CXIdxEntity_TemplatePartialSpecialization: c_uint = 2;
const CXIdxEntity_TemplateSpecialization: c_uint = 3;
type CXIdxAttrKind = c_uint;
const CXIdxAttr_Unexposed: c_uint = 0;
const CXIdxAttr_IBAction: c_uint = 1;
const CXIdxAttr_IBOutlet: c_uint = 2;
const CXIdxAttr_IBOutletCollection: c_uint = 3;
struct CXIdxAttrInfo {
    kind: CXIdxAttrKind,
    cursor: CXCursor,
    loc: CXIdxLoc,
}
struct CXIdxEntityInfo {
    kind: CXIdxEntityKind,
    templateKind: CXIdxEntityCXXTemplateKind,
    lang: CXIdxEntityLanguage,
    name: *c_schar,
    USR: *c_schar,
    cursor: CXCursor,
    attributes: **CXIdxAttrInfo,
    numAttributes: c_uint,
}
struct CXIdxContainerInfo {
    cursor: CXCursor,
}
struct CXIdxIBOutletCollectionAttrInfo {
    attrInfo: *CXIdxAttrInfo,
    objcClass: *CXIdxEntityInfo,
    classCursor: CXCursor,
    classLoc: CXIdxLoc,
}
struct CXIdxDeclInfo {
    entityInfo: *CXIdxEntityInfo,
    cursor: CXCursor,
    loc: CXIdxLoc,
    semanticContainer: *CXIdxContainerInfo,
    lexicalContainer: *CXIdxContainerInfo,
    isRedeclaration: c_int,
    isDefinition: c_int,
    isContainer: c_int,
    declAsContainer: *CXIdxContainerInfo,
    isImplicit: c_int,
    attributes: **CXIdxAttrInfo,
    numAttributes: c_uint,
}
type CXIdxObjCContainerKind = c_uint;
const CXIdxObjCContainer_ForwardRef: c_uint = 0;
const CXIdxObjCContainer_Interface: c_uint = 1;
const CXIdxObjCContainer_Implementation: c_uint = 2;
struct CXIdxObjCContainerDeclInfo {
    declInfo: *CXIdxDeclInfo,
    kind: CXIdxObjCContainerKind,
}
struct CXIdxBaseClassInfo {
    base: *CXIdxEntityInfo,
    cursor: CXCursor,
    loc: CXIdxLoc,
}
struct CXIdxObjCProtocolRefInfo {
    protocol: *CXIdxEntityInfo,
    cursor: CXCursor,
    loc: CXIdxLoc,
}
struct CXIdxObjCProtocolRefListInfo {
    protocols: **CXIdxObjCProtocolRefInfo,
    numProtocols: c_uint,
}
struct CXIdxObjCInterfaceDeclInfo {
    containerInfo: *CXIdxObjCContainerDeclInfo,
    superInfo: *CXIdxBaseClassInfo,
    protocols: *CXIdxObjCProtocolRefListInfo,
}
struct CXIdxObjCCategoryDeclInfo {
    containerInfo: *CXIdxObjCContainerDeclInfo,
    objcClass: *CXIdxEntityInfo,
    classCursor: CXCursor,
    classLoc: CXIdxLoc,
    protocols: *CXIdxObjCProtocolRefListInfo,
}
struct CXIdxObjCPropertyDeclInfo {
    declInfo: *CXIdxDeclInfo,
    getter: *CXIdxEntityInfo,
    setter: *CXIdxEntityInfo,
}
struct CXIdxCXXClassDeclInfo {
    declInfo: *CXIdxDeclInfo,
    bases: **CXIdxBaseClassInfo,
    numBases: c_uint,
}
type CXIdxEntityRefKind = c_uint;
const CXIdxEntityRef_Direct: c_uint = 1;
const CXIdxEntityRef_Implicit: c_uint = 2;
struct CXIdxEntityRefInfo {
    kind: CXIdxEntityRefKind,
    cursor: CXCursor,
    loc: CXIdxLoc,
    referencedEntity: *CXIdxEntityInfo,
    parentEntity: *CXIdxEntityInfo,
    container: *CXIdxContainerInfo,
}
struct IndexerCallbacks {
    abortQuery: *u8,
    diagnostic: *u8,
    enteredMainFile: *u8,
    ppIncludedFile: *u8,
    importedASTFile: *u8,
    startedTranslationUnit: *u8,
    indexDeclaration: *u8,
    indexEntityReference: *u8,
}
type CXIndexAction = *c_void;
type CXIndexOptFlags = c_uint;
const CXIndexOpt_None: c_uint = 0;
const CXIndexOpt_SuppressRedundantRefs: c_uint = 1;
const CXIndexOpt_IndexFunctionLocalSymbols: c_uint = 2;
const CXIndexOpt_IndexImplicitTemplateInstantiations: c_uint = 4;
const CXIndexOpt_SuppressWarnings: c_uint = 8;
#[link_args = "-lclang"]
extern {
    fn clang_getCString(++string: CXString) -> *c_schar;
    fn clang_disposeString(++string: CXString);
    fn clang_createIndex(++excludeDeclarationsFromPCH: c_int,
                         ++displayDiagnostics: c_int) -> CXIndex;
    fn clang_disposeIndex(++index: CXIndex);
    fn clang_CXIndex_setGlobalOptions(++arg1: CXIndex, ++options: c_uint);
    fn clang_CXIndex_getGlobalOptions(++arg1: CXIndex) -> c_uint;
    fn clang_getFileName(++SFile: CXFile) -> CXString;
    fn clang_getFileTime(++SFile: CXFile) -> time_t;
    fn clang_isFileMultipleIncludeGuarded(++tu: CXTranslationUnit,
                                          ++file: CXFile) -> c_uint;
    fn clang_getFile(++tu: CXTranslationUnit, ++file_name: *c_schar) ->
     CXFile;
    fn clang_getNullLocation() -> CXSourceLocation;
    fn clang_equalLocations(++loc1: CXSourceLocation,
                            ++loc2: CXSourceLocation) -> c_uint;
    fn clang_getLocation(++tu: CXTranslationUnit, ++file: CXFile,
                         ++line: c_uint, ++column: c_uint) ->
     CXSourceLocation;
    fn clang_getLocationForOffset(++tu: CXTranslationUnit, ++file: CXFile,
                                  ++offset: c_uint) -> CXSourceLocation;
    fn clang_getNullRange() -> CXSourceRange;
    fn clang_getRange(++begin: CXSourceLocation, ++end: CXSourceLocation) ->
     CXSourceRange;
    fn clang_equalRanges(++range1: CXSourceRange, ++range2: CXSourceRange) ->
     c_uint;
    fn clang_Range_isNull(++range: CXSourceRange) -> c_int;
    fn clang_getExpansionLocation(++location: CXSourceLocation,
                                  ++file: *CXFile, ++line: *c_uint,
                                  ++column: *c_uint, ++offset: *c_uint);
    fn clang_getPresumedLocation(++location: CXSourceLocation,
                                 ++filename: *CXString, ++line: *c_uint,
                                 ++column: *c_uint);
    fn clang_getInstantiationLocation(++location: CXSourceLocation,
                                      ++file: *CXFile, ++line: *c_uint,
                                      ++column: *c_uint, ++offset: *c_uint);
    fn clang_getSpellingLocation(++location: CXSourceLocation,
                                 ++file: *CXFile, ++line: *c_uint,
                                 ++column: *c_uint, ++offset: *c_uint);
    fn clang_getRangeStart(++range: CXSourceRange) -> CXSourceLocation;
    fn clang_getRangeEnd(++range: CXSourceRange) -> CXSourceLocation;
    fn clang_getNumDiagnosticsInSet(++Diags: CXDiagnosticSet) -> c_uint;
    fn clang_getDiagnosticInSet(++Diags: CXDiagnosticSet, ++Index: c_uint) ->
     CXDiagnostic;
    fn clang_loadDiagnostics(++file: *c_schar,
                             ++error: *Enum_CXLoadDiag_Error,
                             ++errorString: *CXString) -> CXDiagnosticSet;
    fn clang_disposeDiagnosticSet(++Diags: CXDiagnosticSet);
    fn clang_getChildDiagnostics(++D: CXDiagnostic) -> CXDiagnosticSet;
    fn clang_getNumDiagnostics(++Unit: CXTranslationUnit) -> c_uint;
    fn clang_getDiagnostic(++Unit: CXTranslationUnit, ++Index: c_uint) ->
     CXDiagnostic;
    fn clang_getDiagnosticSetFromTU(++Unit: CXTranslationUnit) ->
     CXDiagnosticSet;
    fn clang_disposeDiagnostic(++Diagnostic: CXDiagnostic);
    fn clang_formatDiagnostic(++Diagnostic: CXDiagnostic, ++Options: c_uint)
     -> CXString;
    fn clang_defaultDiagnosticDisplayOptions() -> c_uint;
    fn clang_getDiagnosticSeverity(++arg1: CXDiagnostic) ->
     Enum_CXDiagnosticSeverity;
    fn clang_getDiagnosticLocation(++arg1: CXDiagnostic) -> CXSourceLocation;
    fn clang_getDiagnosticSpelling(++arg1: CXDiagnostic) -> CXString;
    fn clang_getDiagnosticOption(++Diag: CXDiagnostic, ++Disable: *CXString)
     -> CXString;
    fn clang_getDiagnosticCategory(++arg1: CXDiagnostic) -> c_uint;
    fn clang_getDiagnosticCategoryName(++Category: c_uint) -> CXString;
    fn clang_getDiagnosticCategoryText(++arg1: CXDiagnostic) -> CXString;
    fn clang_getDiagnosticNumRanges(++arg1: CXDiagnostic) -> c_uint;
    fn clang_getDiagnosticRange(++Diagnostic: CXDiagnostic, ++Range: c_uint)
     -> CXSourceRange;
    fn clang_getDiagnosticNumFixIts(++Diagnostic: CXDiagnostic) -> c_uint;
    fn clang_getDiagnosticFixIt(++Diagnostic: CXDiagnostic, ++FixIt: c_uint,
                                ++ReplacementRange: *CXSourceRange) ->
     CXString;
    fn clang_getTranslationUnitSpelling(++CTUnit: CXTranslationUnit) ->
     CXString;
    fn clang_createTranslationUnitFromSourceFile(++CIdx: CXIndex,
                                                 ++source_filename: *c_schar,
                                                 ++num_clang_command_line_args:
                                                     c_int,
                                                 ++clang_command_line_args:
                                                     **c_schar,
                                                 ++num_unsaved_files: c_uint,
                                                 ++unsaved_files:
                                                     *Struct_CXUnsavedFile) ->
     CXTranslationUnit;
    fn clang_createTranslationUnit(++arg1: CXIndex, ++ast_filename: *c_schar)
     -> CXTranslationUnit;
    fn clang_defaultEditingTranslationUnitOptions() -> c_uint;
    fn clang_parseTranslationUnit(++CIdx: CXIndex,
                                  ++source_filename: *c_schar,
                                  ++command_line_args: **c_schar,
                                  ++num_command_line_args: c_int,
                                  ++unsaved_files: *Struct_CXUnsavedFile,
                                  ++num_unsaved_files: c_uint,
                                  ++options: c_uint) -> CXTranslationUnit;
    fn clang_defaultSaveOptions(++TU: CXTranslationUnit) -> c_uint;
    fn clang_saveTranslationUnit(++TU: CXTranslationUnit,
                                 ++FileName: *c_schar, ++options: c_uint) ->
     c_int;
    fn clang_disposeTranslationUnit(++arg1: CXTranslationUnit);
    fn clang_defaultReparseOptions(++TU: CXTranslationUnit) -> c_uint;
    fn clang_reparseTranslationUnit(++TU: CXTranslationUnit,
                                    ++num_unsaved_files: c_uint,
                                    ++unsaved_files: *Struct_CXUnsavedFile,
                                    ++options: c_uint) -> c_int;
    fn clang_getTUResourceUsageName(++kind: Enum_CXTUResourceUsageKind) ->
     *c_schar;
    fn clang_getCXTUResourceUsage(++TU: CXTranslationUnit) ->
     CXTUResourceUsage;
    fn clang_disposeCXTUResourceUsage(++usage: CXTUResourceUsage);
    fn clang_getNullCursor() -> CXCursor;
    fn clang_getTranslationUnitCursor(++arg1: CXTranslationUnit) -> CXCursor;
    fn clang_equalCursors(++arg1: CXCursor, ++arg2: CXCursor) -> c_uint;
    fn clang_Cursor_isNull(++arg1: CXCursor) -> c_int;
    fn clang_hashCursor(++arg1: CXCursor) -> c_uint;
    fn clang_getCursorKind(++arg1: CXCursor) -> Enum_CXCursorKind;
    fn clang_isDeclaration(++arg1: Enum_CXCursorKind) -> c_uint;
    fn clang_isReference(++arg1: Enum_CXCursorKind) -> c_uint;
    fn clang_isExpression(++arg1: Enum_CXCursorKind) -> c_uint;
    fn clang_isStatement(++arg1: Enum_CXCursorKind) -> c_uint;
    fn clang_isAttribute(++arg1: Enum_CXCursorKind) -> c_uint;
    fn clang_isInvalid(++arg1: Enum_CXCursorKind) -> c_uint;
    fn clang_isTranslationUnit(++arg1: Enum_CXCursorKind) -> c_uint;
    fn clang_isPreprocessing(++arg1: Enum_CXCursorKind) -> c_uint;
    fn clang_isUnexposed(++arg1: Enum_CXCursorKind) -> c_uint;
    fn clang_getCursorLinkage(++cursor: CXCursor) -> Enum_CXLinkageKind;
    fn clang_getCursorAvailability(++cursor: CXCursor) ->
     Enum_CXAvailabilityKind;
    fn clang_getCursorLanguage(++cursor: CXCursor) -> Enum_CXLanguageKind;
    fn clang_Cursor_getTranslationUnit(++arg1: CXCursor) -> CXTranslationUnit;
    fn clang_createCXCursorSet() -> CXCursorSet;
    fn clang_disposeCXCursorSet(++cset: CXCursorSet);
    fn clang_CXCursorSet_contains(++cset: CXCursorSet, ++cursor: CXCursor) ->
     c_uint;
    fn clang_CXCursorSet_insert(++cset: CXCursorSet, ++cursor: CXCursor) ->
     c_uint;
    fn clang_getCursorSemanticParent(++cursor: CXCursor) -> CXCursor;
    fn clang_getCursorLexicalParent(++cursor: CXCursor) -> CXCursor;
    fn clang_getOverriddenCursors(++cursor: CXCursor,
                                  ++overridden: **CXCursor,
                                  ++num_overridden: *c_uint);
    fn clang_disposeOverriddenCursors(++overridden: *CXCursor);
    fn clang_getIncludedFile(++cursor: CXCursor) -> CXFile;
    fn clang_getCursor(++arg1: CXTranslationUnit, ++arg2: CXSourceLocation) ->
     CXCursor;
    fn clang_getCursorLocation(++arg1: CXCursor) -> CXSourceLocation;
    fn clang_getCursorExtent(++arg1: CXCursor) -> CXSourceRange;
    fn clang_getCursorType(++C: CXCursor) -> CXType;
    fn clang_getTypedefDeclUnderlyingType(++C: CXCursor) -> CXType;
    fn clang_getEnumDeclIntegerType(++C: CXCursor) -> CXType;
    fn clang_getEnumConstantDeclValue(++C: CXCursor) -> c_longlong;
    fn clang_getEnumConstantDeclUnsignedValue(++C: CXCursor) -> c_ulonglong;
    fn clang_Cursor_getNumArguments(++C: CXCursor) -> c_int;
    fn clang_Cursor_getArgument(++C: CXCursor, ++i: c_uint) -> CXCursor;
    fn clang_equalTypes(++A: CXType, ++B: CXType) -> c_uint;
    fn clang_getCanonicalType(++T: CXType) -> CXType;
    fn clang_isConstQualifiedType(++T: CXType) -> c_uint;
    fn clang_isVolatileQualifiedType(++T: CXType) -> c_uint;
    fn clang_isRestrictQualifiedType(++T: CXType) -> c_uint;
    fn clang_getPointeeType(++T: CXType) -> CXType;
    fn clang_getTypeDeclaration(++T: CXType) -> CXCursor;
    fn clang_getDeclObjCTypeEncoding(++C: CXCursor) -> CXString;
    fn clang_getTypeKindSpelling(++K: Enum_CXTypeKind) -> CXString;
    fn clang_getFunctionTypeCallingConv(++T: CXType) -> Enum_CXCallingConv;
    fn clang_getResultType(++T: CXType) -> CXType;
    fn clang_getNumArgTypes(++T: CXType) -> c_int;
    fn clang_getArgType(++T: CXType, ++i: c_uint) -> CXType;
    fn clang_isFunctionTypeVariadic(++T: CXType) -> c_uint;
    fn clang_getCursorResultType(++C: CXCursor) -> CXType;
    fn clang_isPODType(++T: CXType) -> c_uint;
    fn clang_getElementType(++T: CXType) -> CXType;
    fn clang_getNumElements(++T: CXType) -> c_longlong;
    fn clang_getArrayElementType(++T: CXType) -> CXType;
    fn clang_getArraySize(++T: CXType) -> c_longlong;
    fn clang_isVirtualBase(++arg1: CXCursor) -> c_uint;
    fn clang_getCXXAccessSpecifier(++arg1: CXCursor) ->
     Enum_CX_CXXAccessSpecifier;
    fn clang_getNumOverloadedDecls(++cursor: CXCursor) -> c_uint;
    fn clang_getOverloadedDecl(++cursor: CXCursor, ++index: c_uint) ->
     CXCursor;
    fn clang_getIBOutletCollectionType(++arg1: CXCursor) -> CXType;
    fn clang_visitChildren(++parent: CXCursor, ++visitor: CXCursorVisitor,
                           ++client_data: CXClientData) -> c_uint;
    fn clang_getCursorUSR(++arg1: CXCursor) -> CXString;
    fn clang_constructUSR_ObjCClass(++class_name: *c_schar) -> CXString;
    fn clang_constructUSR_ObjCCategory(++class_name: *c_schar,
                                       ++category_name: *c_schar) -> CXString;
    fn clang_constructUSR_ObjCProtocol(++protocol_name: *c_schar) -> CXString;
    fn clang_constructUSR_ObjCIvar(++name: *c_schar, ++classUSR: CXString) ->
     CXString;
    fn clang_constructUSR_ObjCMethod(++name: *c_schar,
                                     ++isInstanceMethod: c_uint,
                                     ++classUSR: CXString) -> CXString;
    fn clang_constructUSR_ObjCProperty(++property: *c_schar,
                                       ++classUSR: CXString) -> CXString;
    fn clang_getCursorSpelling(++arg1: CXCursor) -> CXString;
    fn clang_Cursor_getSpellingNameRange(++arg1: CXCursor,
                                         ++pieceIndex: c_uint,
                                         ++options: c_uint) -> CXSourceRange;
    fn clang_getCursorDisplayName(++arg1: CXCursor) -> CXString;
    fn clang_getCursorReferenced(++arg1: CXCursor) -> CXCursor;
    fn clang_getCursorDefinition(++arg1: CXCursor) -> CXCursor;
    fn clang_isCursorDefinition(++arg1: CXCursor) -> c_uint;
    fn clang_getCanonicalCursor(++arg1: CXCursor) -> CXCursor;
    fn clang_Cursor_getObjCSelectorIndex(++arg1: CXCursor) -> c_int;
    fn clang_CXXMethod_isStatic(++C: CXCursor) -> c_uint;
    fn clang_CXXMethod_isVirtual(++C: CXCursor) -> c_uint;
    fn clang_getTemplateCursorKind(++C: CXCursor) -> Enum_CXCursorKind;
    fn clang_getSpecializedCursorTemplate(++C: CXCursor) -> CXCursor;
    fn clang_getCursorReferenceNameRange(++C: CXCursor, ++NameFlags: c_uint,
                                         ++PieceIndex: c_uint) ->
     CXSourceRange;
    fn clang_getTokenKind(++arg1: CXToken) -> CXTokenKind;
    fn clang_getTokenSpelling(++arg1: CXTranslationUnit, ++arg2: CXToken) ->
     CXString;
    fn clang_getTokenLocation(++arg1: CXTranslationUnit, ++arg2: CXToken) ->
     CXSourceLocation;
    fn clang_getTokenExtent(++arg1: CXTranslationUnit, ++arg2: CXToken) ->
     CXSourceRange;
    fn clang_tokenize(++TU: CXTranslationUnit, ++Range: CXSourceRange,
                      ++Tokens: **CXToken, ++NumTokens: *c_uint);
    fn clang_annotateTokens(++TU: CXTranslationUnit, ++Tokens: *CXToken,
                            ++NumTokens: c_uint, ++Cursors: *CXCursor);
    fn clang_disposeTokens(++TU: CXTranslationUnit, ++Tokens: *CXToken,
                           ++NumTokens: c_uint);
    fn clang_getCursorKindSpelling(++Kind: Enum_CXCursorKind) -> CXString;
    fn clang_getDefinitionSpellingAndExtent(++arg1: CXCursor,
                                            ++startBuf: **c_schar,
                                            ++endBuf: **c_schar,
                                            ++startLine: *c_uint,
                                            ++startColumn: *c_uint,
                                            ++endLine: *c_uint,
                                            ++endColumn: *c_uint);
    fn clang_enableStackTraces();
    fn clang_executeOnThread(++_fn: *u8, ++user_data: *c_void,
                             ++stack_size: c_uint);
    fn clang_getCompletionChunkKind(++completion_string: CXCompletionString,
                                    ++chunk_number: c_uint) ->
     Enum_CXCompletionChunkKind;
    fn clang_getCompletionChunkText(++completion_string: CXCompletionString,
                                    ++chunk_number: c_uint) -> CXString;
    fn clang_getCompletionChunkCompletionString(++completion_string:
                                                    CXCompletionString,
                                                ++chunk_number: c_uint) ->
     CXCompletionString;
    fn clang_getNumCompletionChunks(++completion_string: CXCompletionString)
     -> c_uint;
    fn clang_getCompletionPriority(++completion_string: CXCompletionString) ->
     c_uint;
    fn clang_getCompletionAvailability(++completion_string:
                                           CXCompletionString) ->
     Enum_CXAvailabilityKind;
    fn clang_getCompletionNumAnnotations(++completion_string:
                                             CXCompletionString) -> c_uint;
    fn clang_getCompletionAnnotation(++completion_string: CXCompletionString,
                                     ++annotation_number: c_uint) -> CXString;
    fn clang_getCompletionParent(++completion_string: CXCompletionString,
                                 ++kind: *Enum_CXCursorKind) -> CXString;
    fn clang_getCursorCompletionString(++cursor: CXCursor) ->
     CXCompletionString;
    fn clang_defaultCodeCompleteOptions() -> c_uint;
    fn clang_codeCompleteAt(++TU: CXTranslationUnit,
                            ++complete_filename: *c_schar,
                            ++complete_line: c_uint,
                            ++complete_column: c_uint,
                            ++unsaved_files: *Struct_CXUnsavedFile,
                            ++num_unsaved_files: c_uint, ++options: c_uint) ->
     *CXCodeCompleteResults;
    fn clang_sortCodeCompletionResults(++Results: *CXCompletionResult,
                                       ++NumResults: c_uint);
    fn clang_disposeCodeCompleteResults(++Results: *CXCodeCompleteResults);
    fn clang_codeCompleteGetNumDiagnostics(++Results: *CXCodeCompleteResults)
     -> c_uint;
    fn clang_codeCompleteGetDiagnostic(++Results: *CXCodeCompleteResults,
                                       ++Index: c_uint) -> CXDiagnostic;
    fn clang_codeCompleteGetContexts(++Results: *CXCodeCompleteResults) ->
     c_ulonglong;
    fn clang_codeCompleteGetContainerKind(++Results: *CXCodeCompleteResults,
                                          ++IsIncomplete: *c_uint) ->
     Enum_CXCursorKind;
    fn clang_codeCompleteGetContainerUSR(++Results: *CXCodeCompleteResults) ->
     CXString;
    fn clang_codeCompleteGetObjCSelector(++Results: *CXCodeCompleteResults) ->
     CXString;
    fn clang_getClangVersion() -> CXString;
    fn clang_toggleCrashRecovery(++isEnabled: c_uint);
    fn clang_getInclusions(++tu: CXTranslationUnit,
                           ++visitor: CXInclusionVisitor,
                           ++client_data: CXClientData);
    fn clang_getRemappings(++path: *c_schar) -> CXRemapping;
    fn clang_getRemappingsFromFileList(++filePaths: **c_schar,
                                       ++numFiles: c_uint) -> CXRemapping;
    fn clang_remap_getNumFiles(++arg1: CXRemapping) -> c_uint;
    fn clang_remap_getFilenames(++arg1: CXRemapping, ++index: c_uint,
                                ++original: *CXString,
                                ++transformed: *CXString);
    fn clang_remap_dispose(++arg1: CXRemapping);
    fn clang_findReferencesInFile(++cursor: CXCursor, ++file: CXFile,
                                  ++visitor: CXCursorAndRangeVisitor);
    fn clang_index_isEntityObjCContainerKind(++arg1: CXIdxEntityKind) ->
     c_int;
    fn clang_index_getObjCContainerDeclInfo(++arg1: *CXIdxDeclInfo) ->
     *CXIdxObjCContainerDeclInfo;
    fn clang_index_getObjCInterfaceDeclInfo(++arg1: *CXIdxDeclInfo) ->
     *CXIdxObjCInterfaceDeclInfo;
    fn clang_index_getObjCCategoryDeclInfo(++arg1: *CXIdxDeclInfo) ->
     *CXIdxObjCCategoryDeclInfo;
    fn clang_index_getObjCProtocolRefListInfo(++arg1: *CXIdxDeclInfo) ->
     *CXIdxObjCProtocolRefListInfo;
    fn clang_index_getObjCPropertyDeclInfo(++arg1: *CXIdxDeclInfo) ->
     *CXIdxObjCPropertyDeclInfo;
    fn clang_index_getIBOutletCollectionAttrInfo(++arg1: *CXIdxAttrInfo) ->
     *CXIdxIBOutletCollectionAttrInfo;
    fn clang_index_getCXXClassDeclInfo(++arg1: *CXIdxDeclInfo) ->
     *CXIdxCXXClassDeclInfo;
    fn clang_index_getClientContainer(++arg1: *CXIdxContainerInfo) ->
     CXIdxClientContainer;
    fn clang_index_setClientContainer(++arg1: *CXIdxContainerInfo,
                                      ++arg2: CXIdxClientContainer);
    fn clang_index_getClientEntity(++arg1: *CXIdxEntityInfo) ->
     CXIdxClientEntity;
    fn clang_index_setClientEntity(++arg1: *CXIdxEntityInfo,
                                   ++arg2: CXIdxClientEntity);
    fn clang_IndexAction_create(++CIdx: CXIndex) -> CXIndexAction;
    fn clang_IndexAction_dispose(++arg1: CXIndexAction);
    fn clang_indexSourceFile(++arg1: CXIndexAction,
                             ++client_data: CXClientData,
                             ++index_callbacks: *IndexerCallbacks,
                             ++index_callbacks_size: c_uint,
                             ++index_options: c_uint,
                             ++source_filename: *c_schar,
                             ++command_line_args: **c_schar,
                             ++num_command_line_args: c_int,
                             ++unsaved_files: *Struct_CXUnsavedFile,
                             ++num_unsaved_files: c_uint,
                             ++out_TU: *CXTranslationUnit,
                             ++TU_options: c_uint) -> c_int;
    fn clang_indexTranslationUnit(++arg1: CXIndexAction,
                                  ++client_data: CXClientData,
                                  ++index_callbacks: *IndexerCallbacks,
                                  ++index_callbacks_size: c_uint,
                                  ++index_options: c_uint,
                                  ++arg2: CXTranslationUnit) -> c_int;
    fn clang_indexLoc_getFileLocation(++loc: CXIdxLoc,
                                      ++indexFile: *CXIdxClientFile,
                                      ++file: *CXFile, ++line: *c_uint,
                                      ++column: *c_uint, ++offset: *c_uint);
    fn clang_indexLoc_getCXSourceLocation(++loc: CXIdxLoc) ->
     CXSourceLocation;
}
